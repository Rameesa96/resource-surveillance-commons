
// generated by tsserve-gen.ts. DO NOT EDIT.

// Setup the environment and globals to let imported modules know their caller
Deno.env.set(
  "SURVEILR_COMMONS_IMPORT_META",
  JSON.stringify({ importedFrom: import.meta.url }),
);

Deno.serve({ port: 9022 }, async (request) => {
  const { pathname } = new URL(request.url);

  if (pathname.startsWith('/ts/')) {
    const path = pathname.slice(4);
    const fullUrl = `https://raw.githubusercontent.com/opsfolio/resource-surveillance-commons/main/${path}.ts`;
    let mimeType = 'text/plain';
    let importedModule;

    try {
      switch (path) {
        case 'prime/prime.sql': {
          importedModule = await import('https://raw.githubusercontent.com/opsfolio/resource-surveillance-commons/main/prime/prime.sql.ts');
          mimeType = 'text/sql';
          break;
        }
        case 'pattern/digital-health/ux.sql': {
          importedModule = await import('https://raw.githubusercontent.com/opsfolio/resource-surveillance-commons/main/pattern/digital-health/ux.sql.ts');
          mimeType = 'text/sql';
          break;
        }
        default:
          return new Response(`Path ${path} did not match a valid route. Valid routes: [prime/prime.sql, pattern/digital-health/ux.sql]`, { status: 404 });
      }
    } catch (error) {
      return new Response(
        `Path ${path} (${fullUrl}) error: ${error.message}. Please check the script content and try again.`,
        { status: 500 }
      );
    }

    // Extract default export from the imported module, if available
    // deno-lint-ignore no-explicit-any
    const defaultService = (importedModule as any)["default"];
    let output = `No content delivered by ${path} (${fullUrl}), did you forget to set a default string supplier (module.default is of type ${typeof defaultService})?`;
    if(defaultService && typeof defaultService === "function") {
        const result = defaultService();
        if(typeof result === "string") {
            output = result;
        } else {
            output = `No content delivered by ${path} (${fullUrl}), module.default returned type ${typeof defaultService})?`;
        }
    }

    console.log({ path, importedModule, defaultService, fullUrl });

    return new Response(output, {
      status: 200,
      headers: { 'Content-Type': mimeType },
    });

  } else {
    return new Response('Can only handle /ts routes', { status: 404 });
  }
});
